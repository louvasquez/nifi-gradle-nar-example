
description = 'An example project on how to use Gradle to build NiFi ARchive projects (NARs)'

final String BUILD_TIMESTAMP_FORMAT = "yyyy-MM-dd'T'HH:mm:ss'Z'";

// Populate this if your NAR has a parent NAR
def parentNar = null
        //[group  : 'org.apache.nifi', name   : 'nifi-standard-services-api-nar', version: project.version ]

jar {
    dependsOn ':nifi-gradle-built-example-processors:jar'
    jar.extension = 'nar'

    println "running jar"
    into('META-INF/bundled-dependencies') {
        from project(':nifi-gradle-built-example-processors').configurations.compile
        from project(':nifi-gradle-built-example-processors').tasks['jar'].archivePath
    }

    //println "branch:" + getWorkingBranch() + " rev:" + getWorkingRevision() + " tag:" + getWorkingTag()
    manifest {
        def defaultAttrs = [
                'Build-Revision'                     : gitRev() ?: 'unknown',
                'Build-Branch'                       : gitBranch() ?: 'unknown',
                'Build-Tag'                          : gitTag(),
                'Build-Timestamp'                    : new Date().format(BUILD_TIMESTAMP_FORMAT),
                'Built-By'                           : System.properties['user.name'] ?: 'unknown',
                'Nar-Id'                             : project.name,
                'Nar-Version'                        : project.ext.nar_version,
                'Clone-During-Instance-Class-Loading': false,
                'Created-By'                         : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'                          : "Groovy ${GroovySystem.version}"
        ]
        if (parentNar) {
            defaultAttrs += [
                    'Nar-Dependency-Group'  : parentNar.group,
                    'Nar-Dependency-Id'     : parentNar.name,
                    'Nar-Dependency-Version': parentNar.version
            ]
        }
        attributes(defaultAttrs)
    }
}

def gitBranch() {
    def byteOut = new ByteArrayOutputStream()
    project.exec {
        commandLine = "git rev-parse --abbrev-ref HEAD".split(" ")
        standardOutput = byteOut
    }
    return new String(byteOut.toByteArray()).trim()
}
def gitRev() {
    def byteOut = new ByteArrayOutputStream()
    project.exec {
        commandLine = "git rev-parse --short HEAD".split(" ")
        standardOutput = byteOut
    }
    return new String(byteOut.toByteArray()).trim()
}

def gitTag() {
    def byteOut = new ByteArrayOutputStream()
    project.exec {
        commandLine = "git describe --tags --abbrev=0".split(" ")
        standardOutput = byteOut
    }
    return new String(byteOut.toByteArray()).trim()
}

